package com.example.demo214.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.demo214.T1348647909107Bean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "T1348647909107_BEAN".
*/
public class T1348647909107BeanDao extends AbstractDao<T1348647909107Bean, Long> {

    public static final String TABLENAME = "T1348647909107_BEAN";

    /**
     * Properties of entity T1348647909107Bean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Lid = new Property(0, Long.class, "lid", true, "_id");
        public final static Property Template = new Property(1, String.class, "template", false, "TEMPLATE");
        public final static Property SkipID = new Property(2, String.class, "skipID", false, "SKIP_ID");
        public final static Property Lmodify = new Property(3, String.class, "lmodify", false, "LMODIFY");
        public final static Property Postid = new Property(4, String.class, "postid", false, "POSTID");
        public final static Property Source = new Property(5, String.class, "source", false, "SOURCE");
        public final static Property Title = new Property(6, String.class, "title", false, "TITLE");
        public final static Property Mtime = new Property(7, String.class, "mtime", false, "MTIME");
        public final static Property HasImg = new Property(8, int.class, "hasImg", false, "HAS_IMG");
        public final static Property Topic_background = new Property(9, String.class, "topic_background", false, "TOPIC_BACKGROUND");
        public final static Property Digest = new Property(10, String.class, "digest", false, "DIGEST");
        public final static Property PhotosetID = new Property(11, String.class, "photosetID", false, "PHOTOSET_ID");
        public final static Property Boardid = new Property(12, String.class, "boardid", false, "BOARDID");
        public final static Property Alias = new Property(13, String.class, "alias", false, "ALIAS");
        public final static Property HasAD = new Property(14, int.class, "hasAD", false, "HAS_AD");
        public final static Property Imgsrc = new Property(15, String.class, "imgsrc", false, "IMGSRC");
        public final static Property Ptime = new Property(16, String.class, "ptime", false, "PTIME");
        public final static Property Daynum = new Property(17, String.class, "daynum", false, "DAYNUM");
        public final static Property HasHead = new Property(18, int.class, "hasHead", false, "HAS_HEAD");
        public final static Property ImgType = new Property(19, int.class, "imgType", false, "IMG_TYPE");
        public final static Property Order = new Property(20, int.class, "order", false, "ORDER");
        public final static Property Votecount = new Property(21, int.class, "votecount", false, "VOTECOUNT");
        public final static Property HasCover = new Property(22, boolean.class, "hasCover", false, "HAS_COVER");
        public final static Property Docid = new Property(23, String.class, "docid", false, "DOCID");
        public final static Property Tname = new Property(24, String.class, "tname", false, "TNAME");
        public final static Property Priority = new Property(25, int.class, "priority", false, "PRIORITY");
        public final static Property Ename = new Property(26, String.class, "ename", false, "ENAME");
        public final static Property ReplyCount = new Property(27, int.class, "replyCount", false, "REPLY_COUNT");
        public final static Property Imgsum = new Property(28, int.class, "imgsum", false, "IMGSUM");
        public final static Property HasIcon = new Property(29, boolean.class, "hasIcon", false, "HAS_ICON");
        public final static Property SkipType = new Property(30, String.class, "skipType", false, "SKIP_TYPE");
        public final static Property Cid = new Property(31, String.class, "cid", false, "CID");
    }


    public T1348647909107BeanDao(DaoConfig config) {
        super(config);
    }
    
    public T1348647909107BeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"T1348647909107_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: lid
                "\"TEMPLATE\" TEXT," + // 1: template
                "\"SKIP_ID\" TEXT," + // 2: skipID
                "\"LMODIFY\" TEXT," + // 3: lmodify
                "\"POSTID\" TEXT," + // 4: postid
                "\"SOURCE\" TEXT," + // 5: source
                "\"TITLE\" TEXT," + // 6: title
                "\"MTIME\" TEXT," + // 7: mtime
                "\"HAS_IMG\" INTEGER NOT NULL ," + // 8: hasImg
                "\"TOPIC_BACKGROUND\" TEXT," + // 9: topic_background
                "\"DIGEST\" TEXT," + // 10: digest
                "\"PHOTOSET_ID\" TEXT," + // 11: photosetID
                "\"BOARDID\" TEXT," + // 12: boardid
                "\"ALIAS\" TEXT," + // 13: alias
                "\"HAS_AD\" INTEGER NOT NULL ," + // 14: hasAD
                "\"IMGSRC\" TEXT," + // 15: imgsrc
                "\"PTIME\" TEXT," + // 16: ptime
                "\"DAYNUM\" TEXT," + // 17: daynum
                "\"HAS_HEAD\" INTEGER NOT NULL ," + // 18: hasHead
                "\"IMG_TYPE\" INTEGER NOT NULL ," + // 19: imgType
                "\"ORDER\" INTEGER NOT NULL ," + // 20: order
                "\"VOTECOUNT\" INTEGER NOT NULL ," + // 21: votecount
                "\"HAS_COVER\" INTEGER NOT NULL ," + // 22: hasCover
                "\"DOCID\" TEXT," + // 23: docid
                "\"TNAME\" TEXT," + // 24: tname
                "\"PRIORITY\" INTEGER NOT NULL ," + // 25: priority
                "\"ENAME\" TEXT," + // 26: ename
                "\"REPLY_COUNT\" INTEGER NOT NULL ," + // 27: replyCount
                "\"IMGSUM\" INTEGER NOT NULL ," + // 28: imgsum
                "\"HAS_ICON\" INTEGER NOT NULL ," + // 29: hasIcon
                "\"SKIP_TYPE\" TEXT," + // 30: skipType
                "\"CID\" TEXT);"); // 31: cid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"T1348647909107_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, T1348647909107Bean entity) {
        stmt.clearBindings();
 
        Long lid = entity.getLid();
        if (lid != null) {
            stmt.bindLong(1, lid);
        }
 
        String template = entity.getTemplate();
        if (template != null) {
            stmt.bindString(2, template);
        }
 
        String skipID = entity.getSkipID();
        if (skipID != null) {
            stmt.bindString(3, skipID);
        }
 
        String lmodify = entity.getLmodify();
        if (lmodify != null) {
            stmt.bindString(4, lmodify);
        }
 
        String postid = entity.getPostid();
        if (postid != null) {
            stmt.bindString(5, postid);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(6, source);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
 
        String mtime = entity.getMtime();
        if (mtime != null) {
            stmt.bindString(8, mtime);
        }
        stmt.bindLong(9, entity.getHasImg());
 
        String topic_background = entity.getTopic_background();
        if (topic_background != null) {
            stmt.bindString(10, topic_background);
        }
 
        String digest = entity.getDigest();
        if (digest != null) {
            stmt.bindString(11, digest);
        }
 
        String photosetID = entity.getPhotosetID();
        if (photosetID != null) {
            stmt.bindString(12, photosetID);
        }
 
        String boardid = entity.getBoardid();
        if (boardid != null) {
            stmt.bindString(13, boardid);
        }
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(14, alias);
        }
        stmt.bindLong(15, entity.getHasAD());
 
        String imgsrc = entity.getImgsrc();
        if (imgsrc != null) {
            stmt.bindString(16, imgsrc);
        }
 
        String ptime = entity.getPtime();
        if (ptime != null) {
            stmt.bindString(17, ptime);
        }
 
        String daynum = entity.getDaynum();
        if (daynum != null) {
            stmt.bindString(18, daynum);
        }
        stmt.bindLong(19, entity.getHasHead());
        stmt.bindLong(20, entity.getImgType());
        stmt.bindLong(21, entity.getOrder());
        stmt.bindLong(22, entity.getVotecount());
        stmt.bindLong(23, entity.getHasCover() ? 1L: 0L);
 
        String docid = entity.getDocid();
        if (docid != null) {
            stmt.bindString(24, docid);
        }
 
        String tname = entity.getTname();
        if (tname != null) {
            stmt.bindString(25, tname);
        }
        stmt.bindLong(26, entity.getPriority());
 
        String ename = entity.getEname();
        if (ename != null) {
            stmt.bindString(27, ename);
        }
        stmt.bindLong(28, entity.getReplyCount());
        stmt.bindLong(29, entity.getImgsum());
        stmt.bindLong(30, entity.getHasIcon() ? 1L: 0L);
 
        String skipType = entity.getSkipType();
        if (skipType != null) {
            stmt.bindString(31, skipType);
        }
 
        String cid = entity.getCid();
        if (cid != null) {
            stmt.bindString(32, cid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, T1348647909107Bean entity) {
        stmt.clearBindings();
 
        Long lid = entity.getLid();
        if (lid != null) {
            stmt.bindLong(1, lid);
        }
 
        String template = entity.getTemplate();
        if (template != null) {
            stmt.bindString(2, template);
        }
 
        String skipID = entity.getSkipID();
        if (skipID != null) {
            stmt.bindString(3, skipID);
        }
 
        String lmodify = entity.getLmodify();
        if (lmodify != null) {
            stmt.bindString(4, lmodify);
        }
 
        String postid = entity.getPostid();
        if (postid != null) {
            stmt.bindString(5, postid);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(6, source);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
 
        String mtime = entity.getMtime();
        if (mtime != null) {
            stmt.bindString(8, mtime);
        }
        stmt.bindLong(9, entity.getHasImg());
 
        String topic_background = entity.getTopic_background();
        if (topic_background != null) {
            stmt.bindString(10, topic_background);
        }
 
        String digest = entity.getDigest();
        if (digest != null) {
            stmt.bindString(11, digest);
        }
 
        String photosetID = entity.getPhotosetID();
        if (photosetID != null) {
            stmt.bindString(12, photosetID);
        }
 
        String boardid = entity.getBoardid();
        if (boardid != null) {
            stmt.bindString(13, boardid);
        }
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(14, alias);
        }
        stmt.bindLong(15, entity.getHasAD());
 
        String imgsrc = entity.getImgsrc();
        if (imgsrc != null) {
            stmt.bindString(16, imgsrc);
        }
 
        String ptime = entity.getPtime();
        if (ptime != null) {
            stmt.bindString(17, ptime);
        }
 
        String daynum = entity.getDaynum();
        if (daynum != null) {
            stmt.bindString(18, daynum);
        }
        stmt.bindLong(19, entity.getHasHead());
        stmt.bindLong(20, entity.getImgType());
        stmt.bindLong(21, entity.getOrder());
        stmt.bindLong(22, entity.getVotecount());
        stmt.bindLong(23, entity.getHasCover() ? 1L: 0L);
 
        String docid = entity.getDocid();
        if (docid != null) {
            stmt.bindString(24, docid);
        }
 
        String tname = entity.getTname();
        if (tname != null) {
            stmt.bindString(25, tname);
        }
        stmt.bindLong(26, entity.getPriority());
 
        String ename = entity.getEname();
        if (ename != null) {
            stmt.bindString(27, ename);
        }
        stmt.bindLong(28, entity.getReplyCount());
        stmt.bindLong(29, entity.getImgsum());
        stmt.bindLong(30, entity.getHasIcon() ? 1L: 0L);
 
        String skipType = entity.getSkipType();
        if (skipType != null) {
            stmt.bindString(31, skipType);
        }
 
        String cid = entity.getCid();
        if (cid != null) {
            stmt.bindString(32, cid);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public T1348647909107Bean readEntity(Cursor cursor, int offset) {
        T1348647909107Bean entity = new T1348647909107Bean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // lid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // template
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // skipID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // lmodify
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // postid
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // source
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // title
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // mtime
            cursor.getInt(offset + 8), // hasImg
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // topic_background
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // digest
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // photosetID
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // boardid
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // alias
            cursor.getInt(offset + 14), // hasAD
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // imgsrc
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // ptime
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // daynum
            cursor.getInt(offset + 18), // hasHead
            cursor.getInt(offset + 19), // imgType
            cursor.getInt(offset + 20), // order
            cursor.getInt(offset + 21), // votecount
            cursor.getShort(offset + 22) != 0, // hasCover
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // docid
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // tname
            cursor.getInt(offset + 25), // priority
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // ename
            cursor.getInt(offset + 27), // replyCount
            cursor.getInt(offset + 28), // imgsum
            cursor.getShort(offset + 29) != 0, // hasIcon
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // skipType
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31) // cid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, T1348647909107Bean entity, int offset) {
        entity.setLid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTemplate(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSkipID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLmodify(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPostid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSource(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTitle(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMtime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHasImg(cursor.getInt(offset + 8));
        entity.setTopic_background(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDigest(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPhotosetID(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setBoardid(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAlias(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setHasAD(cursor.getInt(offset + 14));
        entity.setImgsrc(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setPtime(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setDaynum(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setHasHead(cursor.getInt(offset + 18));
        entity.setImgType(cursor.getInt(offset + 19));
        entity.setOrder(cursor.getInt(offset + 20));
        entity.setVotecount(cursor.getInt(offset + 21));
        entity.setHasCover(cursor.getShort(offset + 22) != 0);
        entity.setDocid(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setTname(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setPriority(cursor.getInt(offset + 25));
        entity.setEname(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setReplyCount(cursor.getInt(offset + 27));
        entity.setImgsum(cursor.getInt(offset + 28));
        entity.setHasIcon(cursor.getShort(offset + 29) != 0);
        entity.setSkipType(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setCid(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(T1348647909107Bean entity, long rowId) {
        entity.setLid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(T1348647909107Bean entity) {
        if(entity != null) {
            return entity.getLid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(T1348647909107Bean entity) {
        return entity.getLid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
