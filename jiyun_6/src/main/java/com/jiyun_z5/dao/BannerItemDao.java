package com.jiyun_z5.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jiyun_z5.bean.BannerItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BANNER_ITEM".
*/
public class BannerItemDao extends AbstractDao<BannerItem, Long> {

    public static final String TABLENAME = "BANNER_ITEM";

    /**
     * Properties of entity BannerItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Desc = new Property(0, String.class, "desc", false, "DESC");
        public final static Property Bid = new Property(1, Long.class, "bid", true, "bid");
        public final static Property ItmeId = new Property(2, long.class, "itmeId", false, "ITME_ID");
        public final static Property ImagePath = new Property(3, String.class, "imagePath", false, "IMAGE_PATH");
        public final static Property Title = new Property(4, String.class, "title", false, "TITLE");
        public final static Property Url = new Property(5, String.class, "url", false, "URL");
    }


    public BannerItemDao(DaoConfig config) {
        super(config);
    }
    
    public BannerItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BANNER_ITEM\" (" + //
                "\"DESC\" TEXT," + // 0: desc
                "\"bid\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 1: bid
                "\"ITME_ID\" INTEGER NOT NULL ," + // 2: itmeId
                "\"IMAGE_PATH\" TEXT," + // 3: imagePath
                "\"TITLE\" TEXT," + // 4: title
                "\"URL\" TEXT);"); // 5: url
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BANNER_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BannerItem entity) {
        stmt.clearBindings();
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(1, desc);
        }
 
        Long bid = entity.getBid();
        if (bid != null) {
            stmt.bindLong(2, bid);
        }
        stmt.bindLong(3, entity.getItmeId());
 
        String imagePath = entity.getImagePath();
        if (imagePath != null) {
            stmt.bindString(4, imagePath);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(6, url);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BannerItem entity) {
        stmt.clearBindings();
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(1, desc);
        }
 
        Long bid = entity.getBid();
        if (bid != null) {
            stmt.bindLong(2, bid);
        }
        stmt.bindLong(3, entity.getItmeId());
 
        String imagePath = entity.getImagePath();
        if (imagePath != null) {
            stmt.bindString(4, imagePath);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(6, url);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1);
    }    

    @Override
    public BannerItem readEntity(Cursor cursor, int offset) {
        BannerItem entity = new BannerItem( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // desc
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // bid
            cursor.getLong(offset + 2), // itmeId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // imagePath
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // title
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // url
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BannerItem entity, int offset) {
        entity.setDesc(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBid(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setItmeId(cursor.getLong(offset + 2));
        entity.setImagePath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BannerItem entity, long rowId) {
        entity.setBid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BannerItem entity) {
        if(entity != null) {
            return entity.getBid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BannerItem entity) {
        return entity.getBid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
